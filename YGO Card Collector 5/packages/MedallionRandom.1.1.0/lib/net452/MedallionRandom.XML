<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MedallionRandom</name>
    </assembly>
    <members>
        <member name="T:Medallion.Rand">
            <summary>
            Contains helpers and extensions for working with random number generators
            </summary>
        </member>
        <member name="M:Medallion.Rand.NextBoolean(System.Random)">
            <summary>
            Returns a random boolean value
            </summary>
        </member>
        <member name="M:Medallion.Rand.NextInt32(System.Random)">
            <summary>
            Returns a random 32-bit integer
            </summary>
        </member>
        <member name="M:Medallion.Rand.NextInt64(System.Random)">
            <summary>
            Returns a random 64-bit integer
            </summary>
        </member>
        <member name="M:Medallion.Rand.NextSingle(System.Random)">
            <summary>
            Returns a random <see cref="T:System.Single"/> value in [0, 1)
            </summary>
        </member>
        <member name="M:Medallion.Rand.NextDoubles(System.Random)">
            <summary>
            Returns the sequence of values that would be generated by repeated
            calls to <see cref="M:System.Random.NextDouble"/>
            </summary>
        </member>
        <member name="M:Medallion.Rand.NextBoolean(System.Random,System.Double)">
            <summary>
            Returns true with probability <paramref name="probability"/>
            </summary>
        </member>
        <member name="M:Medallion.Rand.NextBytes(System.Random)">
            <summary>
            Returns the sequence of bytes that would be returned by repeated calls
            to <see cref="M:System.Random.NextBytes(System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Medallion.Rand.Shuffled``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Returns <paramref name="source"/> randomly shuffled using 
            <paramref name="random"/> or else <see cref="P:Medallion.Rand.Current"/>.
            
            This method performs a lazy "streaming" shuffle: when the first
            element of the returned <see cref="T:System.Collections.Generic.IEnumerable`1"/> is requested, the
            entire <paramref name="source"/> sequence is enumerated. The <paramref name="random"/>
            is then used lazily to shuffle the next element into place as the result
            sequence is enumerated
            </summary>
        </member>
        <member name="M:Medallion.Rand.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Shuffles the given <paramref name="list"/> using <paramref name="random"/> 
            if provided or else <see cref="P:Medallion.Rand.Current"/>
            </summary>
        </member>
        <member name="M:Medallion.Rand.NextGaussian(System.Random)">
            <summary>
            Returns a normally-distributed double value with mean 0 and standard deviation 1
            </summary>
        </member>
        <member name="M:Medallion.Rand.NextDouble(System.Random,System.Double)">
            <summary>
            Returns a random double value uniformly in [0, <paramref name="max"/>). The underlying randomness is
            provided by <see cref="M:System.Random.NextDouble"/>, which may be unsuitable for very large ranges
            </summary>
        </member>
        <member name="M:Medallion.Rand.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Returns a random double value uniformly in [<paramref name="min"/>, <paramref name="max"/>). The 
            underlying randomness is provided by <see cref="M:System.Random.NextDouble"/>, which may be unsuitable for 
            very large ranges
            </summary>
        </member>
        <member name="P:Medallion.Rand.Current">
            <summary>
            Returns a thread-safe <see cref="T:System.Random"/> instance which can be used 
            for static random calls
            </summary>
        </member>
        <member name="M:Medallion.Rand.NextDouble">
            <summary>
            Returns a double value in [0, 1)
            </summary>
        </member>
        <member name="M:Medallion.Rand.Next(System.Int32,System.Int32)">
            <summary>
            Returns an int value in [<paramref name="minValue"/>, <paramref name="maxValue"/>)
            </summary>
        </member>
        <member name="M:Medallion.Rand.Create">
            <summary>
            Comparable to <code>new Random()</code>, but seeds the <see cref="T:System.Random"/> with
            a time-dependent value that will still vary greatly across calls to <see cref="M:Medallion.Rand.Create"/>.
            This avoids the problem of many <see cref="T:System.Random"/>s created close together being seeded
            with the same value
            </summary>
        </member>
        <member name="M:Medallion.Rand.CreateJavaRandom">
            <summary>
            Creates a <see cref="T:System.Random"/> that uses the same algorithm as the JRE. The <see cref="T:System.Random"/>
            is seeded with a time-dependent value which will vary greatly even across close-together calls to
            <see cref="M:Medallion.Rand.CreateJavaRandom"/>
            </summary>
        </member>
        <member name="M:Medallion.Rand.CreateJavaRandom(System.Int64)">
            <summary>
            Creates a <see cref="T:System.Random"/> which replicates the same random sequence as is produced by
            the standard random number generator in the JRE using the same <paramref name="seed"/>
            </summary>
        </member>
        <member name="M:Medallion.Rand.AsRandom(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Returns a <see cref="T:System.Random"/> instance which uses the given <paramref name="randomNumberGenerator"/>
            as a source of randomness
            </summary>
        </member>
    </members>
</doc>
